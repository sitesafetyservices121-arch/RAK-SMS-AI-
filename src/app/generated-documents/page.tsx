"use client";

import { useState, useMemo, useEffect } from "react";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Download, FileText, Search } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Separator } from "@/components/ui/separator";
import { useAuth } from "@/hooks/use-auth";
import { useToast } from "@/hooks/use-toast";
import type { GeneratedDocumentRecord } from "@/types/generated-document";

const DOCUMENT_TYPE_LABELS: Record<string, string> = {
  "she-plan": "SHE Plan",
  "hira": "HIRA",
  "method-statement": "Method Statement",
  "safe-work-procedure": "Safe Work Procedure",
  "ltir-analysis": "LTIR Analysis",
};

function formatDocumentType(type: string): string {
  return DOCUMENT_TYPE_LABELS[type] ?? type.replace(/-/g, " ").replace(/\b\w/g, (char) => char.toUpperCase());
}

export default function GeneratedDocumentsPage() {
  const { user } = useAuth();
  const { toast } = useToast();
  const [searchTerm, setSearchTerm] = useState("");
  const [documents, setDocuments] = useState<GeneratedDocumentRecord[]>([]);
  const [isLoading, setIsLoading] = useState(false);

  useEffect(() => {
    if (!user) {
      setDocuments([]);
      return;
    }

    const controller = new AbortController();
    const fetchDocuments = async () => {
      setIsLoading(true);
      try {
        const response = await fetch(
          `/api/generated-documents?companyId=${encodeURIComponent(user.companyId)}`,
          { signal: controller.signal }
        );

        if (!response.ok) {
          throw new Error(`Failed to load documents (${response.status})`);
        }

        const data = (await response.json()) as {
          documents?: GeneratedDocumentRecord[];
        };
        setDocuments(data.documents ?? []);
      } catch (error) {
        if ((error as Error).name === "AbortError") return;
        console.error(error);
        toast({
          variant: "destructive",
          title: "Unable to load documents",
          description: (error as Error).message,
        });
        setDocuments([]);
      } finally {
        setIsLoading(false);
      }
    };

    void fetchDocuments();
    return () => controller.abort();
  }, [user, toast]);

  const groupedAndFilteredDocs = useMemo(() => {
    const filtered = documents.filter((doc) =>
      [doc.fileName, doc.documentType, doc.companyName]
        .filter(Boolean)
        .some((field) => field.toLowerCase().includes(searchTerm.toLowerCase()))
    );

    return filtered.reduce((acc, doc) => {
      const type = doc.documentType;
      if (!acc[type]) {
        acc[type] = [];
      }
      acc[type].push(doc);
      return acc;
    }, {} as Record<string, GeneratedDocumentRecord[]>);
  }, [documents, searchTerm]);

  const hasResults = Object.keys(groupedAndFilteredDocs).length > 0;

  return (
    <Card>
      <CardHeader>
        <CardTitle>Generated Documents</CardTitle>
        <CardDescription>
          Browse and download documents generated by the AI tools, organised by
          document type. Only documents from your company are shown.
        </CardDescription>
      </CardHeader>
      <CardContent>
        {!user && (
          <div className="mb-4 rounded-md border border-dashed p-4 text-sm text-muted-foreground">
            Sign in to view generated documents for your company.
          </div>
        )}
        <div className="mb-6">
          <div className="relative">
            <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
            <Input
              type="search"
              placeholder="Search by document type, filename, or company..."
              className="w-full max-w-sm pl-8"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              disabled={!user}
            />
          </div>
        </div>

        {isLoading ? (
          <div className="flex h-40 items-center justify-center rounded-md border border-dashed">
            <p className="text-muted-foreground">Loading documents...</p>
          </div>
        ) : hasResults ? (
          <div className="space-y-8">
            {Object.entries(groupedAndFilteredDocs).map(([documentType, docs]) => (
              <div key={documentType}>
                <h2 className="text-xl font-semibold tracking-tight">
                  {formatDocumentType(documentType)}
                </h2>
                <Separator className="my-2" />
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Company</TableHead>
                      <TableHead>Filename</TableHead>
                      <TableHead>Generated On</TableHead>
                      <TableHead className="text-right">Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {docs.map((doc) => (
                      <TableRow key={doc.id}>
                        <TableCell>
                          <Badge variant="secondary">{doc.companyName}</Badge>
                        </TableCell>
                        <TableCell className="font-medium flex items-center gap-2">
                          <FileText className="h-4 w-4 text-red-500" />
                          {doc.fileName}
                        </TableCell>
                        <TableCell>
                          {new Date(doc.generatedOn).toLocaleString()}
                        </TableCell>
                        <TableCell className="text-right">
                          <Button
                            variant="ghost"
                            size="icon"
                            asChild
                            disabled={!doc.downloadUrl}
                          >
                            <a
                              href={doc.downloadUrl || undefined}
                              download={doc.fileName}
                            >
                              <Download className="h-4 w-4" />
                              <span className="sr-only">Download</span>
                            </a>
                          </Button>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </div>
            ))}
          </div>
        ) : (
          <div className="flex h-40 items-center justify-center rounded-md border border-dashed">
            <p className="text-muted-foreground">
              No documents found for your search.
            </p>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
