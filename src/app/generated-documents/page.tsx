"use client";

import { useState, useMemo } from "react";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Download, FileText, Search } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Separator } from "@/components/ui/separator";

type DocumentType = "SHE Plan" | "HIRA" | "Method Statement" | "Safe Work Procedure";

type GeneratedDoc = {
  id: string;
  clientCompanyId: string;
  documentType: DocumentType;
  generatedOn: string;
  fileName: string;
};

// This is mock data. In a real app, you would fetch this from a database.
const allGeneratedDocs: GeneratedDoc[] = [
  {
    id: "doc1",
    clientCompanyId: "CLIENT-001",
    documentType: "SHE Plan",
    generatedOn: "2024-07-22",
    fileName: "SHE-Plan-CLIENT-001-2024-07-22T10:30:00.000Z.pdf",
  },
  {
    id: "doc2",
    clientCompanyId: "CLIENT-002",
    documentType: "HIRA",
    generatedOn: "2024-07-21",
    fileName: "HIRA-Report-CLIENT-002-2024-07-21T14:00:00.000Z.pdf",
  },
  {
    id: "doc3",
    clientCompanyId: "CLIENT-001",
    documentType: "Method Statement",
    generatedOn: "2024-07-20",
    fileName: "Method-Statement-CLIENT-001-2024-07-20T09:00:00.000Z.pdf",
  },
  {
    id: "doc4",
    clientCompanyId: "CLIENT-003",
    documentType: "Safe Work Procedure",
    generatedOn: "2024-07-22",
    fileName: "SWP-CLIENT-003-2024-07-22T11:00:00.000Z.pdf",
  },
  {
    id: "doc5",
    clientCompanyId: "CLIENT-002",
    documentType: "SHE Plan",
    generatedOn: "2024-07-23",
    fileName: "SHE-Plan-CLIENT-002-2024-07-23T08:00:00.000Z.pdf",
  },
];

export default function GeneratedDocumentsPage() {
  const [searchTerm, setSearchTerm] = useState("");

  const groupedAndFilteredDocs = useMemo(() => {
    const filtered = allGeneratedDocs.filter((doc) =>
      [doc.clientCompanyId, doc.documentType, doc.fileName]
        .some((field) => field.toLowerCase().includes(searchTerm.toLowerCase()))
    );

    return filtered.reduce((acc, doc) => {
      if (!acc[doc.documentType]) {
        acc[doc.documentType] = [];
      }
      acc[doc.documentType].push(doc);
      return acc;
    }, {} as Record<DocumentType, GeneratedDoc[]>);
  }, [searchTerm]);

  const hasResults = Object.keys(groupedAndFilteredDocs).length > 0;

  return (
    <Card>
      <CardHeader>
        <CardTitle>Generated Documents</CardTitle>
        <CardDescription>
          Browse and download documents generated by the AI tools, organized by
          client and document type.
        </CardDescription>
      </CardHeader>
      <CardContent>
        {/* Search Input */}
        <div className="mb-6">
          <div className="relative">
            <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
            <Input
              type="search"
              placeholder="Search by Client ID, Doc Type, or Filename..."
              className="w-full max-w-sm pl-8"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
        </div>

        {/* Results */}
        {hasResults ? (
          <div className="space-y-8">
            {Object.entries(groupedAndFilteredDocs).map(
              ([documentType, docs]) => (
                <div key={documentType}>
                  <h2 className="text-xl font-semibold tracking-tight">
                    {documentType}s
                  </h2>
                  <Separator className="my-2" />
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Client Company ID</TableHead>
                        <TableHead>Filename</TableHead>
                        <TableHead>Generated On</TableHead>
                        <TableHead className="text-right">Actions</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {docs.map((doc) => (
                        <TableRow key={doc.id}>
                          <TableCell>
                            <Badge variant="secondary">
                              {doc.clientCompanyId}
                            </Badge>
                          </TableCell>
                          <TableCell className="font-medium flex items-center gap-2">
                            <FileText className="h-4 w-4 text-red-500" />
                            {doc.fileName}
                          </TableCell>
                          <TableCell>{doc.generatedOn}</TableCell>
                          <TableCell className="text-right">
                            <Button variant="ghost" size="icon" asChild>
                              {/* In a real app, this would trigger a download from cloud storage */}
                              <a href="#" download={doc.fileName}>
                                <Download className="h-4 w-4" />
                                <span className="sr-only">Download</span>
                              </a>
                            </Button>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </div>
              )
            )}
          </div>
        ) : (
          <div className="flex h-40 items-center justify-center rounded-md border border-dashed">
            <p className="text-muted-foreground">
              No documents found for your search.
            </p>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
