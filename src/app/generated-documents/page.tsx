"use client";

import { useEffect, useMemo, useState } from "react";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
} from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Download, FileText, Search } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Separator } from "@/components/ui/separator";
import type {
  GeneratedDocument,
  GeneratedDocumentType,
} from "@/types/generated-document";

const storageBucket = process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET;

async function loadGeneratedDocuments(): Promise<GeneratedDocument[]> {
  const res = await fetch("/api/generated-documents");
  if (!res.ok) throw new Error("Failed to fetch generated documents");
  const payload = await res.json();
  return payload.data ?? [];
}

export default function GeneratedDocumentsPage() {
  const [searchTerm, setSearchTerm] = useState("");
  const [documents, setDocuments] = useState<GeneratedDocument[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    (async () => {
      try {
        setLoading(true);
        const data = await loadGeneratedDocuments();
        setDocuments(data);
      } catch (error) {
        console.error(error);
      } finally {
        setLoading(false);
      }
    })();
  }, []);

  const groupedAndFilteredDocs = useMemo(() => {
    const filtered = documents.filter((doc) =>
      [doc.documentType, doc.fileName, doc.generatedBy ?? ""]
        .some((field) => field.toLowerCase().includes(searchTerm.toLowerCase()))
    );

    return filtered.reduce((acc, doc) => {
      if (!acc[doc.documentType as GeneratedDocumentType]) {
        acc[doc.documentType as GeneratedDocumentType] = [];
      }
      acc[doc.documentType as GeneratedDocumentType].push(doc);
      return acc;
    }, {} as Record<GeneratedDocumentType, GeneratedDocument[]>);
  }, [documents, searchTerm]);

  const hasResults = Object.keys(groupedAndFilteredDocs).length > 0;

  return (
    <Card>
      <CardHeader>
        <CardTitle>Generated Documents</CardTitle>
        <CardDescription>
          Browse and download documents generated by the AI tools, organized by
          client and document type.
        </CardDescription>
      </CardHeader>
      <CardContent>
        {/* Search Input */}
        <div className="mb-6">
          <div className="relative">
            <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
            <Input
              type="search"
              placeholder="Search by Client ID, Doc Type, or Filename..."
              className="w-full max-w-sm pl-8"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
          </div>
        </div>

        {/* Results */}
        {loading ? (
          <div className="flex h-40 items-center justify-center rounded-md border border-dashed">
            <p className="text-muted-foreground">Loading generated documentsâ€¦</p>
          </div>
        ) : hasResults ? (
          <div className="space-y-8">
            {Object.entries(groupedAndFilteredDocs).map(
              ([documentType, docs]) => (
                <div key={documentType}>
                  <h2 className="text-xl font-semibold tracking-tight">
                    {documentType}s
                  </h2>
                  <Separator className="my-2" />
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Generated By</TableHead>
                        <TableHead>Filename</TableHead>
                        <TableHead>Generated On</TableHead>
                        <TableHead className="text-right">Actions</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {docs.map((doc) => {
                        const downloadUrl = doc.storagePath?.startsWith("http")
                          ? doc.storagePath
                          : storageBucket
                          ? `https://storage.googleapis.com/${storageBucket}/${doc.storagePath}`
                          : "#";
                        return (
                          <TableRow key={doc.id}>
                            <TableCell>
                              <Badge variant="secondary">
                                {doc.generatedBy ?? "Unknown"}
                              </Badge>
                            </TableCell>
                            <TableCell className="font-medium flex items-center gap-2">
                              <FileText className="h-4 w-4 text-red-500" />
                              {doc.fileName}
                            </TableCell>
                            <TableCell>{doc.generatedOn}</TableCell>
                            <TableCell className="text-right">
                              <Button
                                variant="ghost"
                                size="icon"
                                asChild
                                disabled={downloadUrl === "#"}
                              >
                                <a
                                  href={downloadUrl}
                                  download={doc.fileName}
                                  target="_blank"
                                  rel="noopener noreferrer"
                                >
                                  <Download className="h-4 w-4" />
                                  <span className="sr-only">Download</span>
                                </a>
                              </Button>
                            </TableCell>
                          </TableRow>
                        );
                      })}
                    </TableBody>
                  </Table>
                </div>
              )
            )}
          </div>
        ) : (
          <div className="flex h-40 items-center justify-center rounded-md border border-dashed">
            <p className="text-muted-foreground">
              No documents found for your search.
            </p>
          </div>
        )}
      </CardContent>
    </Card>
  );
}
