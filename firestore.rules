/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for data stored under the `/users/{userId}` path.
 * Documents stored directly under `/documents` are publicly readable but only writable by authenticated users who own the document (determined by an 'ownerId' field in the document).
 * All data for SHE Plans, HIRAs, Safe Work Procedures, Method Statements, and LTIR Analyses are nested under `/users/{userId}`,
 * and only the owning user has access to these documents. OHS Consultations are public read/write.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles. Only the user can read/write their own profile.
 * - /documents/{documentId}: Stores general documents. Publicly readable, owner-only writable. Requires 'ownerId' in document.
 * - /users/{userId}/she_plans/{shePlanId}: Stores SHE plans for a specific user. Only the user can access their own SHE plans.
 * - /users/{userId}/hiras/{hiraId}: Stores HIRAs for a specific user. Only the user can access their own HIRAs.
 * - /users/{userId}/safe_work_procedures/{safeWorkProcedureId}: Stores Safe Work Procedures for a specific user. Only the user can access their own procedures.
 * - /users/{userId}/method_statements/{methodStatementId}: Stores Method Statements for a specific user. Only the user can access their own statements.
 * - /users/{userId}/ltir_analyses/{ltirAnalysisId}: Stores LTIR analyses for a specific user. Only the user can access their own analyses.
 * - /ohs_consultations/{ohsConsultationId}: Stores OHS consultation data. Publicly readable and writable.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Data validation is minimal to allow for rapid prototyping. Focus is on authorization.
 *
 * Denormalization for Authorization:
 * - The `/documents/{documentId}` collection requires an `ownerId` field within each document to determine write access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) User 'test_user' with ID 'test_user' can create their own profile.
     * @allow (get, update, delete) User 'test_user' with ID 'test_user' can read, update and delete their own profile.
     * @deny (create) User 'another_user' cannot create a profile for 'test_user'.
     * @deny (get, update, delete) User 'another_user' cannot read, update or delete the 'test_user' profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to safety, health, environment, and quality documents.
     * @path /documents/{documentId}
     * @allow (get, list) Any user can read the documents.
     * @allow (create) User 'test_user' can create a document if they are the owner (ownerId field matches).
     * @allow (update, delete) User 'test_user' can update/delete a document if they are the owner.
     * @deny (create) User 'another_user' cannot create a document with ownerId 'test_user'.
     * @deny (update, delete) User 'another_user' cannot update/delete a document owned by 'test_user'.
     * @principle Allows public read access but restricts write access to the document owner.
     */
    match /documents/{documentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.ownerId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.ownerId);
      allow delete: if isExistingOwner(resource.data.ownerId);
    }

    /**
     * @description Controls access to SHE plans generated by AI for each user.
     * @path /users/{userId}/she_plans/{shePlanId}
     * @allow (create, get, update, delete, list) User 'test_user' with ID 'test_user' can manage their own SHE plans.
     * @deny (create, get, update, delete, list) User 'another_user' cannot manage SHE plans for 'test_user'.
     * @principle Restricts access to SHE plans to the owning user.
     */
    match /users/{userId}/she_plans/{shePlanId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to Hazard Identification and Risk Assessments generated by AI for each user.
     * @path /users/{userId}/hiras/{hiraId}
     * @allow (create, get, update, delete, list) User 'test_user' with ID 'test_user' can manage their own HIRAs.
     * @deny (create, get, update, delete, list) User 'another_user' cannot manage HIRAs for 'test_user'.
     * @principle Restricts access to HIRAs to the owning user.
     */
    match /users/{userId}/hiras/{hiraId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to Safe Work Procedures generated by AI for each user.
     * @path /users/{userId}/safe_work_procedures/{safeWorkProcedureId}
     * @allow (create, get, update, delete, list) User 'test_user' with ID 'test_user' can manage their own Safe Work Procedures.
     * @deny (create, get, update, delete, list) User 'another_user' cannot manage Safe Work Procedures for 'test_user'.
     * @principle Restricts access to Safe Work Procedures to the owning user.
     */
    match /users/{userId}/safe_work_procedures/{safeWorkProcedureId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to Method Statements generated by AI for each user.
     * @path /users/{userId}/method_statements/{methodStatementId}
     * @allow (create, get, update, delete, list) User 'test_user' with ID 'test_user' can manage their own Method Statements.
     * @deny (create, get, update, delete, list) User 'another_user' cannot manage Method Statements for 'test_user'.
     * @principle Restricts access to Method Statements to the owning user.
     */
    match /users/{userId}/method_statements/{methodStatementId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to LTIR trend analyses generated by AI for each user.
     * @path /users/{userId}/ltir_analyses/{ltirAnalysisId}
     * @allow (create, get, update, delete, list) User 'test_user' with ID 'test_user' can manage their own LTIR analyses.
     * @deny (create, get, update, delete, list) User 'another_user' cannot manage LTIR analyses for 'test_user'.
     * @principle Restricts access to LTIR analyses to the owning user.
     */
    match /users/{userId}/ltir_analyses/{ltirAnalysisId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to OHS Act Consultant (Wilson) AI consultation data.
     * @path /ohs_consultations/{ohsConsultationId}
     * @allow (create, get, update, delete, list) Any user can read and write OHS consultation data.
     * @principle Allows public access to OHS consultation data.
     */
    match /ohs_consultations/{ohsConsultationId} {
      allow get, list, create, update, delete: if true;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(ownerId) {
        return isSignedIn() && request.auth.uid == ownerId && resource != null;
    }
  }
}